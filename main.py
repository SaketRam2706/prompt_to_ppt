import os
import json
from pptx import Presentation
from pptx.util import Inches
from deepseek import Client
from dotenv import load_dotenv

def get_presentation_content(prompt: str) -> dict:
    """
    Generates presentation content using the DeepSeek API.

    Args:
        prompt: The user's prompt for the presentation topic.

    Returns:
        A dictionary containing the structured presentation content.
    """
    load_dotenv()
    api_key = os.getenv("DEEPSEEK_API_KEY")
    if not api_key:
        raise ValueError("DEEPSEEK_API_KEY not found in .env file")

    client = Client(api_key=api_key)

    system_prompt = """
    You are an expert in creating presentations.
    Based on the user's prompt, generate content for a presentation.
    The output should be a JSON object with a "title" and a "slides" list.
    Each slide in the list should have a "title" and a "content" which is a list of strings (bullet points).
    Limit the number of slides to a maximum of 5.

    Example format:
    {
      "title": "Presentation Title",
      "slides": [
        {
          "title": "Slide 1 Title",
          "content": ["Bullet point 1", "Bullet point 2"]
        },
        {
          "title": "Slide 2 Title",
          "content": ["Bullet point A", "Bullet point B"]
        }
      ]
    }
    """

    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt},
        ],
        max_tokens=2048,
        temperature=0.7,
        response_format={"type": "json_object"},
    )

    try:
        content = response.choices[0].message.content
        return json.loads(content)
    except (json.JSONDecodeError, KeyError) as e:
        print(f"Error parsing JSON from API response: {e}")
        print(f"Raw response: {content}")
        return None


def create_presentation(content: dict, output_filename: str):
    """
    Creates a PowerPoint presentation from structured content.

    Args:
        content: A dictionary with 'title' and 'slides'.
        output_filename: The name of the output .pptx file.
    """
    prs = Presentation()
    
    # Title slide
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    
    title.text = content.get("title", "Presentation")
    subtitle.text = "Generated by AI"

    # Content slides
    content_slide_layout = prs.slide_layouts[1]
    for slide_data in content.get("slides", []):
        slide = prs.slides.add_slide(content_slide_layout)
        title_shape = slide.shapes.title
        body_shape = slide.placeholders[1]
        
        title_shape.text = slide_data.get("title", "")
        
        tf = body_shape.text_frame
        tf.clear()
        for point in slide_data.get("content", []):
            p = tf.add_paragraph()
            p.text = point
            p.level = 0

    prs.save(output_filename)
    print(f"Presentation saved as {output_filename}")


if __name__ == "__main__":
    user_prompt = input("Enter the topic for your presentation: ")
    if user_prompt:
        print("Generating presentation content with AI...")
        presentation_data = get_presentation_content(user_prompt)
        
        if presentation_data:
            output_file = f"{user_prompt.replace(' ', '_').lower()}_presentation.pptx"
            print(f"Creating presentation: {output_file}")
            create_presentation(presentation_data, output_file)
        else:
            print("Could not generate presentation content.")
    else:
        print("No topic provided. Exiting.") 